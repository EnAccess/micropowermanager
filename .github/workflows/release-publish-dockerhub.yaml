# mostly based on:
# https://docs.docker.com/build/ci/github-actions/multi-platform/
name: Publish images to DockerHub, deploy Demo environment to AWS

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  build-docker-images:
    runs-on: ${{ matrix.platform.github_actions_runner }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - id: micropowermanager-frontend
            repo: enaccess/micropowermanager-frontend
            dockerfile: ./docker/DockerfileFrontendProd
          - id: micropowermanager-backend
            repo: enaccess/micropowermanager-backend
            dockerfile: ./docker/DockerfileBackendProd
        platform:
          - id: amd64
            arch: linux/amd64
            github_actions_runner: ubuntu-latest
          - id: arm64
            arch: linux/arm64
            github_actions_runner: ubuntu-24.04-arm

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Not really needed, but keeping it to evaluate whether we want to
      # use `docker/metadata-action` in the future.
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ matrix.image.repo }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Get version
        run: |
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if image tag already exists
        run: |
          VERSION="${{ env.VERSION }}"
          if docker manifest inspect ${{ matrix.image.repo }}:$VERSION > /dev/null 2>&1; then
            echo "Docker image tag $VERSION already exists."
            exit 1
          else
            echo "Docker image tag $VERSION does not exist. Proceeding with build."
          fi

      - name: Build and push Docker image by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.image.dockerfile }}
          platforms: ${{ matrix.platform.arch }}
          outputs: type=image,"name=${{ matrix.image.repo }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.image.id }}-${{ matrix.platform.id }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  publish-dockerhub:
    runs-on: ubuntu-latest
    needs:
      - build-docker-images
    strategy:
      fail-fast: false
      matrix:
        image:
          - id: micropowermanager-frontend
            repo: enaccess/micropowermanager-frontend
            dockerfile: ./docker/DockerfileFrontendProd
          - id: micropowermanager-backend
            repo: enaccess/micropowermanager-backend
            dockerfile: ./docker/DockerfileBackendProd
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.image.id }}*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        run: |
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if image tag already exists
        run: |
          VERSION="${{ env.VERSION }}"
          if docker manifest inspect ${{ matrix.image.repo }}:$VERSION > /dev/null 2>&1; then
            echo "Docker image tag $VERSION already exists."
            exit 1
          else
            echo "Docker image tag $VERSION does not exist. Proceeding with build."
          fi

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create \
          -t "${{ matrix.image.repo }}:latest" \
          -t "${{ matrix.image.repo }}:${{ env.VERSION }}" \
          $(printf '${{ matrix.image.repo }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ matrix.image.repo }}:${{ env.VERSION }}

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_LEGACY }}
          password: ${{ secrets.DOCKERHUB_TOKEN_LEGACY }}
          repository: ${{ matrix.image.repo }}
          short-description: Open Source Management Tool for Decentralized Utilities

  deploy-aws:
    runs-on: ubuntu-latest
    needs: publish-dockerhub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Authenticate kubectl with EKS
        run: |
          aws eks update-kubeconfig --region eu-central-1 --name mpm

      - name: Deploy to EKS
        run: |
          kubectl apply -k k8s/overlays/demo.micropowermanager.io/

      # We need to restart the pods to pick up latest images
      - name: Restart MicroPowerManager pods on EKS
        run: |
          kubectl rollout restart deployment/mpm-frontend
          kubectl rollout restart deployment/mpm-backend

  deploy-gcp:
    runs-on: ubuntu-latest
    needs: publish-dockerhub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GCP_GKE_CLUSTER_NAME }}
          location: ${{ secrets.GCP_REGION }}

      - name: Deploy to GKE
        run: |
          kubectl apply -k k8s/overlays/demo2.micropowermanager.io/

      # We need to restart the pods to pick up latest images
      - name: Restart MicroPowerManager pods on GKE
        run: |
          kubectl rollout restart deployment/mpm-frontend -n micropowermanager-demo
          kubectl rollout restart deployment/mpm-backend -n micropowermanager-demo
