FROM php:8.2-cli

# install basic apt packages
RUN apt-get update && apt-get install -y \
    git \
    gosu \
    libfreetype6-dev \
    libjpeg-dev \
    libssl-dev \
    libxml2-dev \
    libzip-dev \
    unzip \
    zlib1g-dev

# install container specific apt packages
RUN apt-get update && apt-get install -y \
    cron

# remove apt lists
RUN rm -rf /var/lib/apt/lists/*

# install and configure basic php extensions
RUN docker-php-ext-install \
    bcmath \
    exif \
    gd \
    opcache \
    pcntl \
    pdo \
    pdo_mysql \
    zip
RUN docker-php-ext-configure gd --with-freetype --with-jpeg
RUN docker-php-ext-configure pcntl --enable-pcntl
RUN pecl install redis-5.3.7 && docker-php-ext-enable redis

# install composer
RUN EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')" \
    && php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" \
    && ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")" \
    && if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then \
        >&2 echo 'ERROR: Invalid installer checksum'; \
        rm composer-setup.php; \
        exit 1; \
    fi;
RUN php composer-setup.php --version=2.8.8
RUN php -r "unlink('composer-setup.php');"
RUN mv composer.phar /usr/local/bin/composer

# enable remote debugging
RUN touch /usr/local/etc/php/conf.d/xdebug.ini; \
    echo xdebug.remote_enable=1 >> /usr/local/etc/php/conf.d/xdebug.ini; \
    echo xdebug.remote_autostart=0 >> /usr/local/etc/php/conf.d/xdebug.ini; \
    echo xdebug.remote_connect_back=1 >> /usr/local/etc/php/conf.d/xdebug.ini; \
    echo xdebug.remote_port=9000 >> /usr/local/etc/php/conf.d/xdebug.ini; \
    echo xdebug.remote_log=/tmp/php5-xdebug.log >> /usr/local/etc/php/conf.d/xdebug.ini;

# configure PHP
COPY docker/config/php/php.ini /usr/local/etc/php/php.ini

# configure cron
ADD docker/config/cron/crontab /etc/cron.d/cron
RUN chmod 0644 /etc/cron.d/cron
# create the log file to be able to run tail
RUN touch /var/log/cron.log

# get MicroPowerManager source code and addition files
COPY src/backend /var/www/html

# indicate storage directory to persist data
VOLUME ["/var/www/html/storage"]

COPY docker/entrypoint-scheduler.sh /usr/local/bin/entrypoint-scheduler-prod.sh
RUN chmod +x /usr/local/bin/entrypoint-scheduler-prod.sh

# install MicroPowerManager
WORKDIR /var/www/html
RUN composer install --no-dev --optimize-autoloader

# define entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint-scheduler-prod.sh"]
